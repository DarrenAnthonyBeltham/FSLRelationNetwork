{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/darrenanthonybeltham/relation-and-siamese?scriptVersionId=245775724\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"2129fbe2","metadata":{"papermill":{"duration":0.002647,"end_time":"2025-06-16T15:56:52.739519","exception":false,"start_time":"2025-06-16T15:56:52.736872","status":"completed"},"tags":[]},"source":["# Relation"]},{"cell_type":"code","execution_count":1,"id":"56774ee6","metadata":{"execution":{"iopub.execute_input":"2025-06-16T15:56:52.745415Z","iopub.status.busy":"2025-06-16T15:56:52.745173Z","iopub.status.idle":"2025-06-16T17:27:29.89192Z","shell.execute_reply":"2025-06-16T17:27:29.891176Z"},"papermill":{"duration":5437.153537,"end_time":"2025-06-16T17:27:29.895187","exception":false,"start_time":"2025-06-16T15:56:52.74165","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Using device: cuda\n","====================================================================================================\n","🎯 STARTING MULTI-SEED OVERSAMPLING RATE EXPERIMENT (RELATIONNET)\n","Will run 5 experiments with seeds: [10, 20, 30, 40, 50]\n","====================================================================================================\n","\n","================================================================================\n","🌱 RUN 1/5 - Setting random seed to 10\n","================================================================================\n","✅ Random seed 10 has been set for all libraries\n","🚀 Starting oversampling rate experiment...\n","\n","================================================================================\n","🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\n","================================================================================\n","\n","🔬 Tuning Domain: age_over_30_body\n","INFO: Found 3756 total samples in domain 'age_over_30_body'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n","Downloading: \"https://download.pytorch.org/models/efficientnet_v2_s-dd5fe13b.pth\" to /root/.cache/torch/hub/checkpoints/efficientnet_v2_s-dd5fe13b.pth\n","\n","  0%|          | 0.00/82.7M [00:00<?, ?B/s]\u001b[A\n"," 14%|█▍        | 11.5M/82.7M [00:00<00:00, 120MB/s]\u001b[A\n"," 38%|███▊      | 31.1M/82.7M [00:00<00:00, 170MB/s]\u001b[A\n"," 63%|██████▎   | 52.0M/82.7M [00:00<00:00, 192MB/s]\u001b[A\n","100%|██████████| 82.7M/82.7M [00:00<00:00, 193MB/s]\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  17%|█▋        | 1/6 [00:41<03:27, 41.54s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  33%|███▎      | 2/6 [01:18<02:36, 39.12s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  50%|█████     | 3/6 [01:57<01:56, 38.88s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  67%|██████▋   | 4/6 [02:36<01:17, 38.93s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  83%|████████▎ | 5/6 [03:14<00:38, 38.72s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body: 100%|██████████| 6/6 [03:53<00:00, 39.00s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_under_30_body\n","INFO: Found 522 total samples in domain 'age_under_30_body'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  17%|█▋        | 1/6 [00:35<02:55, 35.10s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  33%|███▎      | 2/6 [01:12<02:26, 36.53s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  50%|█████     | 3/6 [01:50<01:51, 37.06s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  67%|██████▋   | 4/6 [02:28<01:15, 37.56s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  83%|████████▎ | 5/6 [03:07<00:37, 37.85s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body: 100%|██████████| 6/6 [03:46<00:00, 37.73s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_head_neck\n","INFO: Found 349 total samples in domain 'age_over_30_head_neck'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  17%|█▋        | 1/6 [00:36<03:00, 36.03s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  33%|███▎      | 2/6 [01:09<02:18, 34.68s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  50%|█████     | 3/6 [01:42<01:41, 33.67s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  67%|██████▋   | 4/6 [02:15<01:07, 33.51s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  83%|████████▎ | 5/6 [02:47<00:33, 33.13s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck: 100%|██████████| 6/6 [03:21<00:00, 33.56s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_hands_feet\n","INFO: Found 296 total samples in domain 'age_over_30_hands_feet'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  17%|█▋        | 1/6 [00:35<02:55, 35.19s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  33%|███▎      | 2/6 [01:10<02:21, 35.47s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  50%|█████     | 3/6 [01:49<01:50, 36.81s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  67%|██████▋   | 4/6 [02:27<01:14, 37.43s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  83%|████████▎ | 5/6 [03:06<00:37, 37.89s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet: 100%|██████████| 6/6 [03:45<00:00, 37.55s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_limbs\n","INFO: Found 2202 total samples in domain 'age_over_30_limbs'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  17%|█▋        | 1/6 [00:42<03:32, 42.49s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  33%|███▎      | 2/6 [01:19<02:36, 39.14s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  50%|█████     | 3/6 [01:58<01:57, 39.09s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  67%|██████▋   | 4/6 [02:38<01:18, 39.43s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  83%|████████▎ | 5/6 [03:16<00:39, 39.16s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs: 100%|██████████| 6/6 [03:56<00:00, 39.42s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","📊 Results for Run 1 (seed 10):\n","  Domain 'age_over_30_body': Best rate = 1.0, Best F1 = 0.6053\n","    All rates: Rate 0.0: 0.4973, Rate 0.2: 0.4007, Rate 0.4: 0.3616, Rate 0.6: 0.6025, Rate 0.8: 0.5344, Rate 1.0: 0.6053\n","  Domain 'age_under_30_body': Best rate = 0.8, Best F1 = 0.5617\n","    All rates: Rate 0.0: 0.4243, Rate 0.2: 0.4631, Rate 0.4: 0.4538, Rate 0.6: 0.5254, Rate 0.8: 0.5617, Rate 1.0: 0.4956\n","  Domain 'age_over_30_head_neck': Best rate = 0.2, Best F1 = 0.6252\n","    All rates: Rate 0.0: 0.4730, Rate 0.2: 0.6252, Rate 0.4: 0.4404, Rate 0.6: 0.5843, Rate 0.8: 0.4862, Rate 1.0: 0.4784\n","  Domain 'age_over_30_hands_feet': Best rate = 1.0, Best F1 = 0.5139\n","    All rates: Rate 0.0: 0.4539, Rate 0.2: 0.4685, Rate 0.4: 0.4344, Rate 0.6: 0.2960, Rate 0.8: 0.5080, Rate 1.0: 0.5139\n","  Domain 'age_over_30_limbs': Best rate = 0.0, Best F1 = 0.6255\n","    All rates: Rate 0.0: 0.6255, Rate 0.2: 0.5715, Rate 0.4: 0.5803, Rate 0.6: 0.2278, Rate 0.8: 0.5700, Rate 1.0: 0.5861\n","✅ Run 1 completed!\n","📈 Generating plot for Run 1...\n","\n","================================================================================\n","📊 PLOTTING RESULTS FOR RUN 1 (SEED 10) 📊\n","================================================================================\n","Domain 'age_over_30_body': Best rate = 1.0, Best F1 = 0.6053\n","Domain 'age_under_30_body': Best rate = 0.8, Best F1 = 0.5617\n","Domain 'age_over_30_head_neck': Best rate = 0.2, Best F1 = 0.6252\n","Domain 'age_over_30_hands_feet': Best rate = 1.0, Best F1 = 0.5139\n","Domain 'age_over_30_limbs': Best rate = 0.0, Best F1 = 0.6255\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹\n","\n","\n","================================================================================\n","🌱 RUN 2/5 - Setting random seed to 20\n","================================================================================\n","✅ Random seed 20 has been set for all libraries\n","🚀 Starting oversampling rate experiment...\n","\n","================================================================================\n","🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\n","================================================================================\n","\n","🔬 Tuning Domain: age_over_30_body\n","INFO: Found 3756 total samples in domain 'age_over_30_body'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  17%|█▋        | 1/6 [00:33<02:49, 34.00s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  33%|███▎      | 2/6 [01:09<02:19, 34.96s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  50%|█████     | 3/6 [01:47<01:48, 36.16s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  67%|██████▋   | 4/6 [02:25<01:13, 36.99s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  83%|████████▎ | 5/6 [03:04<00:37, 37.73s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body: 100%|██████████| 6/6 [03:43<00:00, 37.23s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_under_30_body\n","INFO: Found 522 total samples in domain 'age_under_30_body'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  17%|█▋        | 1/6 [00:32<02:44, 32.90s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  33%|███▎      | 2/6 [01:10<02:21, 35.40s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  50%|█████     | 3/6 [01:48<01:50, 36.86s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  67%|██████▋   | 4/6 [02:26<01:14, 37.41s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  83%|████████▎ | 5/6 [03:05<00:37, 37.83s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body: 100%|██████████| 6/6 [03:43<00:00, 37.31s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_head_neck\n","INFO: Found 349 total samples in domain 'age_over_30_head_neck'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  17%|█▋        | 1/6 [00:32<02:43, 32.71s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  33%|███▎      | 2/6 [01:05<02:10, 32.55s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  50%|█████     | 3/6 [01:37<01:37, 32.44s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  67%|██████▋   | 4/6 [02:09<01:04, 32.26s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  83%|████████▎ | 5/6 [02:42<00:32, 32.41s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck: 100%|██████████| 6/6 [03:15<00:00, 32.51s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_hands_feet\n","INFO: Found 296 total samples in domain 'age_over_30_hands_feet'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  17%|█▋        | 1/6 [00:32<02:41, 32.25s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  33%|███▎      | 2/6 [01:07<02:17, 34.25s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  50%|█████     | 3/6 [01:45<01:46, 35.61s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  67%|██████▋   | 4/6 [02:23<01:13, 36.50s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  83%|████████▎ | 5/6 [03:00<00:37, 37.01s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet: 100%|██████████| 6/6 [03:39<00:00, 36.51s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_limbs\n","INFO: Found 2202 total samples in domain 'age_over_30_limbs'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  17%|█▋        | 1/6 [00:33<02:47, 33.52s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  33%|███▎      | 2/6 [01:06<02:12, 33.22s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  50%|█████     | 3/6 [01:42<01:43, 34.58s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  67%|██████▋   | 4/6 [02:20<01:11, 35.66s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  83%|████████▎ | 5/6 [02:58<00:36, 36.62s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs: 100%|██████████| 6/6 [03:37<00:00, 36.20s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","📊 Results for Run 2 (seed 20):\n","  Domain 'age_over_30_body': Best rate = 0.8, Best F1 = 0.5194\n","    All rates: Rate 0.0: 0.3569, Rate 0.2: 0.3277, Rate 0.4: 0.5001, Rate 0.6: 0.4789, Rate 0.8: 0.5194, Rate 1.0: 0.4517\n","  Domain 'age_under_30_body': Best rate = 0.6, Best F1 = 0.5595\n","    All rates: Rate 0.0: 0.5505, Rate 0.2: 0.5474, Rate 0.4: 0.3519, Rate 0.6: 0.5595, Rate 0.8: 0.5368, Rate 1.0: 0.4872\n","  Domain 'age_over_30_head_neck': Best rate = 0.0, Best F1 = 0.5629\n","    All rates: Rate 0.0: 0.5629, Rate 0.2: 0.4917, Rate 0.4: 0.4797, Rate 0.6: 0.4762, Rate 0.8: 0.4896, Rate 1.0: 0.4649\n","  Domain 'age_over_30_hands_feet': Best rate = 0.8, Best F1 = 0.5593\n","    All rates: Rate 0.0: 0.4460, Rate 0.2: 0.4804, Rate 0.4: 0.5359, Rate 0.6: 0.5439, Rate 0.8: 0.5593, Rate 1.0: 0.5504\n","  Domain 'age_over_30_limbs': Best rate = 0.4, Best F1 = 0.4760\n","    All rates: Rate 0.0: 0.4046, Rate 0.2: 0.4398, Rate 0.4: 0.4760, Rate 0.6: 0.4618, Rate 0.8: 0.4753, Rate 1.0: 0.4039\n","✅ Run 2 completed!\n","📈 Generating plot for Run 2...\n","\n","================================================================================\n","📊 PLOTTING RESULTS FOR RUN 2 (SEED 20) 📊\n","================================================================================\n","Domain 'age_over_30_body': Best rate = 0.8, Best F1 = 0.5194\n","Domain 'age_under_30_body': Best rate = 0.6, Best F1 = 0.5595\n","Domain 'age_over_30_head_neck': Best rate = 0.0, Best F1 = 0.5629\n","Domain 'age_over_30_hands_feet': Best rate = 0.8, Best F1 = 0.5593\n","Domain 'age_over_30_limbs': Best rate = 0.4, Best F1 = 0.4760\n"]},{"data":{"image/png":"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AAAAGMOX7QLQspdfflnPP/+8ysvL1b9/f11xxRUaPHhwi+cvWbJEs2bNUllZmXr06KHLLrtMJ510UjtWDBxaWzL92muv6c0339TmzZslSQMHDtQll1xyyL8DQHtr63W63qJFi3Tffffp5JNP1o033tgOlQKt09ZMV1dX64knntA777yjqqoqlZaW6utf/zq/fyBntDXT//73v/XKK69o9+7dKikp0WmnnaZLL71UgUCgHasGmrd69Wo999xz+vTTT7Vv3z795Cc/0amnnnrI23z44Yd65JFHtHnzZnXp0kVf/vKXNWXKlPYpGACyiBGeOWrx4sV65JFHNGPGDM2cOVP9+/fXnXfeqYqKimbPX7t2re677z5NmzZNM2fO1CmnnKLf/OY3+uyzz9q5cqB5bc306tWrNWHCBP385z/XHXfcoS5duuiOO+7Q3r1727lyoHltzXS9Xbt26dFHH9Vxxx3XTpUCrdPWTMdiMd1xxx0qKyvTj370I9177726+uqr1blz53auHGheWzO9cOFCPf7447rwwgt1zz336JprrtGSJUv0xBNPtHPlQPPC4bAGDBigK6+8slXn79q1S7/+9a81YsQI3XXXXTr33HP14IMPavny5ZktFAByAA3PHPXCCy/ojDPO0NSpU9WnTx9dddVVCgQCmjdvXrPnv/jiixo9erS+8IUvqE+fPvrKV76igQMH6uWXX27nyoHmtTXT1113nc455xwNGDBAvXv31jXXXCPbtrVy5cp2rhxoXlszLUmJREL333+/LrroInXr1q0dqwUOr62Znjt3rqqqqnTDDTfo2GOPVbdu3TR8+HANGDCgfQsHWtDWTK9du1bDhg3TxIkT1a1bN40aNUoTJkzQJ5980s6VA8078cQT9ZWvfOWwozrrvfLKK+rWrZu+9rWvqU+fPvrc5z6nsWPH6t///neGKwWA7KPhmYNisZg2bNigkSNHJo95PB6NHDlS69ata/Y269ata3S+JI0aNUoff/xxRmsFWiOVTB8sHA4rFoupqKgoU2UCrZZqpufMmaOSkhJNmzatPcoEWi2VTL/33nsaMmSI/vKXv+iqq67Sj3/8Y/3zn/9UIpFor7KBFqWS6WHDhmnDhg3JBufOnTv1/vvv68QTT2yXmoF0+/jjj5t9jdja378BwM1YwzMHVVZWKpFIqGPHjo2Od+zYUdu2bWv2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u+8+PfHEE65peC5fvlxlZWWHbNqMHj1a7733njZu3KgBAwY0+tqbb76paDSqk08+We+++26T2+bqGwW9e/fOdgk5oXv37rJtW/Pnz2+24Tlv3jz16tVLkjOV+0i019/lrl27Zvwx+vXrp/79++v111/X+eefL4+HlawAAMDRg4YnAOSwbdu26YUXXlBRUZFuuukmdezYsdHXPR6PLrroIu3YsUMLFy7U888/r4svvliS9P3vf18VFRX6v//7v2ZHic2cOVPvvfee7r333mSzQJKWLl2ql156SZ9++qkikYh69OihyZMn67zzzmv0gvnA6ZdFRUX617/+pU2bNqm4uFh//OMfJUlvvfWWXnrpJW3dulU1NTUqKipSnz59dNZZZ2ns2LHJ+5o7d67effddbdq0SeXl5QoEAho8eLC++MUv6vjjj29U94cffqhf/vKXmjFjhkaNGqUnn3xS69evl9/v17hx4/S1r31NgUBAy5Yt09NPP63PPvtM+fn5mjx5si655BJ5vd5mv4fCwkL985//1ObNm5WXl6cxY8bo0ksvbfKcN6elqagXXXSRhg8frh/+8Id67LHH9P7776u2tlYDBgzQpZdeqhEjRjS5r02bNunxxx/XRx99JMuydOyxx+qyyy7T888/n5apzOPHj9eDDz6osrIyVVZWqqSkJPm1d955R4sXL9b69eu1b98+eb1e9e/fX9OnT2/086r/fiVnqnn9lHJJ+vnPf578vmzb1rx58zRv3jx99tlnisfj6tOnj84++2xNmzat1TXPmzdPlmXptNNOa/GcyZMn6/3339fcuXN1xRVXNPra/Pnz1bt3bw0dOrTZhmf9lPz63ErOtOg5c+bo5z//ufbt26d//etf2rZtmwoLCzVu3DhddtllzS4jMW/ePL366qvavHmzJKlv3746++yzm0xRPjjHTz31lD755BOFQqHklOz6/NSv4/nd735XZWVlkpwRgvWGDx+uG2+8UVdffbVKS0t19913N6krkUjo+9//vkKhkP73f/+3xSUwPvroI/385z/XlClT9J3vfKfJ1ysqKnTNNddo8ODB+u///m9J0r59+/Tss8/q/fff1549e+T3+9WpUycdd9xxuvzyy9PSQJw6daoef/xxbdiwQQMHDkwe37hxoz799FNdeumlza67GQqF9Morr+j999/Xjh07kpkfOXKkZsyY0aTZfahp5WvWrNEzzzyjdevWKRKJqLS0VOPHj9cXv/jFJtfY+p/dddddp8cff1wrVqxQZWWlbr/9do0YMUK/+MUvtHr16uTP+sClGR544IHk3y/JyeJtt92mjz/+WH/605+aHX36hz/8QW+++abuuOOORqOgx40bpyeffFIffvihRo4c2bonGwAAwAC81QsAOeyNN96Qbds688wzD9l4+/KXvyzJabbUO/3001VbW6ulS5c2Ob+yslLLly/XkCFDGjU7H3/8cf3mN7/Rtm3bdOqppybXBn3sscd07733NvvYS5Ys0e9+9zuVlJTo7LPP1ujRoyVJr7zyiu6++27t2LFDp556qs4991yNGjVK5eXleueddxrdx1/+8hdVVFRo5MiROvfcczVmzBitW7dO//3f/91s/ZL0ySef6L/+679UUFCgM888U127dtUrr7yiBx98UIsXL9bvfvc7lZaW6swzz1QwGNRzzz2nZ555ptn7euutt3T33XerR48emj59uvr166f58+fr9ttvV1VVVYvPe2tUV1fr9ttv15YtW3T66afrtNNO0/r163XnnXfqs88+a3Tuxo0bdfvtt2v58uUaPXq0zjnnHMXjcd1+++3atWvXEdXRnAObv5Lz89+yZYuOPfZYTZ8+XePGjdO2bdt0991366WXXkqeN2DAgORIu/79+2vGjBnJj9LSUklOs/P3v/+9HnzwQVVWVmrChAmaNm2awuGwHnzwQT3yyCOtqtG2bX344Yfq1auXioqKWjyvc+fOGjVqlBYtWqRYLJY8vmHDBm3cuFFTp05t9fNyoJdffln/+7//m2xcFhYW6qWXXtKDDz7Y5NyHH35Yf/rTn7R3715NmzZN06ZN0969e/XAAw/or3/9a7P3v27dOv3iF7+QZVk688wzNX78+BZrmT59uvr375/8//rnfMqUKQoGgxo/fry2bNmitWvXNrntBx98oLKyMk2cOPGQ6/0ee+yxKi0t1dtvv61IJNLk64sWLVI8Htfpp58uSQqHw7rtttv08ssvq3v37vr85z+vKVOmqGfPnlqwYIEqKytbfKy2mDx5sjweT5Om5ty5c+XxeDR58uRmb7dlyxbNnj1bgUBAp5xyis4991wNHDhQCxcu1C233JJsIB/OkiVLkk3KU045RdOnT1deXp7mzJmj//qv/2r2udq/f79uvfVW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\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹\n","\n","\n","================================================================================\n","🌱 RUN 3/5 - Setting random seed to 30\n","================================================================================\n","✅ Random seed 30 has been set for all libraries\n","🚀 Starting oversampling rate experiment...\n","\n","================================================================================\n","🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\n","================================================================================\n","\n","🔬 Tuning Domain: age_over_30_body\n","INFO: Found 3756 total samples in domain 'age_over_30_body'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  17%|█▋        | 1/6 [00:33<02:46, 33.38s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  33%|███▎      | 2/6 [01:07<02:16, 34.07s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  50%|█████     | 3/6 [01:45<01:46, 35.55s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  67%|██████▋   | 4/6 [02:23<01:13, 36.70s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  83%|████████▎ | 5/6 [03:02<00:37, 37.37s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body: 100%|██████████| 6/6 [03:41<00:00, 36.89s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_under_30_body\n","INFO: Found 522 total samples in domain 'age_under_30_body'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  17%|█▋        | 1/6 [00:32<02:44, 32.92s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  33%|███▎      | 2/6 [01:10<02:21, 35.40s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  50%|█████     | 3/6 [01:48<01:49, 36.65s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  67%|██████▋   | 4/6 [02:26<01:14, 37.39s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  83%|████████▎ | 5/6 [03:06<00:38, 38.27s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body: 100%|██████████| 6/6 [03:45<00:00, 37.52s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_head_neck\n","INFO: Found 349 total samples in domain 'age_over_30_head_neck'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  17%|█▋        | 1/6 [00:33<02:45, 33.14s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  33%|███▎      | 2/6 [01:05<02:10, 32.74s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  50%|█████     | 3/6 [01:38<01:38, 32.77s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  67%|██████▋   | 4/6 [02:11<01:05, 32.71s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  83%|████████▎ | 5/6 [02:43<00:32, 32.46s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck: 100%|██████████| 6/6 [03:16<00:00, 32.71s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_hands_feet\n","INFO: Found 296 total samples in domain 'age_over_30_hands_feet'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  17%|█▋        | 1/6 [00:32<02:41, 32.27s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  33%|███▎      | 2/6 [01:07<02:16, 34.04s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  50%|█████     | 3/6 [01:44<01:45, 35.21s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  67%|██████▋   | 4/6 [02:21<01:12, 36.06s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  83%|████████▎ | 5/6 [02:58<00:36, 36.55s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet: 100%|██████████| 6/6 [03:36<00:00, 36.14s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_limbs\n","INFO: Found 2202 total samples in domain 'age_over_30_limbs'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  17%|█▋        | 1/6 [00:33<02:46, 33.34s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  33%|███▎      | 2/6 [01:06<02:12, 33.05s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  50%|█████     | 3/6 [01:42<01:43, 34.48s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  67%|██████▋   | 4/6 [02:19<01:11, 35.56s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  83%|████████▎ | 5/6 [02:57<00:36, 36.40s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs: 100%|██████████| 6/6 [03:35<00:00, 35.96s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","📊 Results for Run 3 (seed 30):\n","  Domain 'age_over_30_body': Best rate = 0.6, Best F1 = 0.6015\n","    All rates: Rate 0.0: 0.4465, Rate 0.2: 0.4443, Rate 0.4: 0.4346, Rate 0.6: 0.6015, Rate 0.8: 0.5116, Rate 1.0: 0.5303\n","  Domain 'age_under_30_body': Best rate = 0.0, Best F1 = 0.6168\n","    All rates: Rate 0.0: 0.6168, Rate 0.2: 0.4656, Rate 0.4: 0.4355, Rate 0.6: 0.4534, Rate 0.8: 0.5315, Rate 1.0: 0.5349\n","  Domain 'age_over_30_head_neck': Best rate = 0.8, Best F1 = 0.5778\n","    All rates: Rate 0.0: 0.3480, Rate 0.2: 0.5563, Rate 0.4: 0.4095, Rate 0.6: 0.4726, Rate 0.8: 0.5778, Rate 1.0: 0.3568\n","  Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.5038\n","    All rates: Rate 0.0: 0.5015, Rate 0.2: 0.5000, Rate 0.4: 0.5038, Rate 0.6: 0.4511, Rate 0.8: 0.4695, Rate 1.0: 0.4290\n","  Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.5448\n","    All rates: Rate 0.0: 0.4733, Rate 0.2: 0.5448, Rate 0.4: 0.3542, Rate 0.6: 0.5267, Rate 0.8: 0.5008, Rate 1.0: 0.3463\n","✅ Run 3 completed!\n","📈 Generating plot for Run 3...\n","\n","================================================================================\n","📊 PLOTTING RESULTS FOR RUN 3 (SEED 30) 📊\n","================================================================================\n","Domain 'age_over_30_body': Best rate = 0.6, Best F1 = 0.6015\n","Domain 'age_under_30_body': Best rate = 0.0, Best F1 = 0.6168\n","Domain 'age_over_30_head_neck': Best rate = 0.8, Best F1 = 0.5778\n","Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.5038\n","Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.5448\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹\n","\n","\n","================================================================================\n","🌱 RUN 4/5 - Setting random seed to 40\n","================================================================================\n","✅ Random seed 40 has been set for all libraries\n","🚀 Starting oversampling rate experiment...\n","\n","================================================================================\n","🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\n","================================================================================\n","\n","🔬 Tuning Domain: age_over_30_body\n","INFO: Found 3756 total samples in domain 'age_over_30_body'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  17%|█▋        | 1/6 [00:33<02:48, 33.79s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  33%|███▎      | 2/6 [01:08<02:16, 34.09s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  50%|█████     | 3/6 [01:45<01:46, 35.60s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  67%|██████▋   | 4/6 [02:23<01:13, 36.63s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  83%|████████▎ | 5/6 [03:02<00:37, 37.26s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body: 100%|██████████| 6/6 [03:40<00:00, 36.78s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_under_30_body\n","INFO: Found 522 total samples in domain 'age_under_30_body'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  17%|█▋        | 1/6 [00:32<02:42, 32.46s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  33%|███▎      | 2/6 [01:10<02:22, 35.51s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  50%|█████     | 3/6 [01:48<01:49, 36.61s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  67%|██████▋   | 4/6 [02:26<01:14, 37.42s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  83%|████████▎ | 5/6 [03:05<00:37, 37.82s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body: 100%|██████████| 6/6 [03:43<00:00, 37.32s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_head_neck\n","INFO: Found 349 total samples in domain 'age_over_30_head_neck'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  17%|█▋        | 1/6 [00:32<02:43, 32.60s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  33%|███▎      | 2/6 [01:04<02:09, 32.41s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  50%|█████     | 3/6 [01:37<01:37, 32.57s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  67%|██████▋   | 4/6 [02:09<01:04, 32.46s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  83%|████████▎ | 5/6 [02:42<00:32, 32.42s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck: 100%|██████████| 6/6 [03:15<00:00, 32.61s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_hands_feet\n","INFO: Found 296 total samples in domain 'age_over_30_hands_feet'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  17%|█▋        | 1/6 [00:32<02:44, 32.80s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  33%|███▎      | 2/6 [01:08<02:16, 34.23s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  50%|█████     | 3/6 [01:45<01:47, 35.92s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  67%|██████▋   | 4/6 [02:23<01:12, 36.48s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  83%|████████▎ | 5/6 [03:01<00:37, 37.16s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet: 100%|██████████| 6/6 [03:39<00:00, 36.54s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_limbs\n","INFO: Found 2202 total samples in domain 'age_over_30_limbs'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  17%|█▋        | 1/6 [00:33<02:48, 33.64s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  33%|███▎      | 2/6 [01:06<02:12, 33.19s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  50%|█████     | 3/6 [01:42<01:42, 34.31s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  67%|██████▋   | 4/6 [02:19<01:11, 35.66s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  83%|████████▎ | 5/6 [02:57<00:36, 36.24s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs: 100%|██████████| 6/6 [03:35<00:00, 35.95s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","📊 Results for Run 4 (seed 40):\n","  Domain 'age_over_30_body': Best rate = 0.0, Best F1 = 0.5692\n","    All rates: Rate 0.0: 0.5692, Rate 0.2: 0.5096, Rate 0.4: 0.5504, Rate 0.6: 0.4656, Rate 0.8: 0.5259, Rate 1.0: 0.4658\n","  Domain 'age_under_30_body': Best rate = 0.0, Best F1 = 0.5243\n","    All rates: Rate 0.0: 0.5243, Rate 0.2: 0.4924, Rate 0.4: 0.4711, Rate 0.6: 0.4573, Rate 0.8: 0.4678, Rate 1.0: 0.4988\n","  Domain 'age_over_30_head_neck': Best rate = 1.0, Best F1 = 0.4729\n","    All rates: Rate 0.0: 0.4400, Rate 0.2: 0.3853, Rate 0.4: 0.4264, Rate 0.6: 0.4205, Rate 0.8: 0.3912, Rate 1.0: 0.4729\n","  Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.5588\n","    All rates: Rate 0.0: 0.5118, Rate 0.2: 0.5427, Rate 0.4: 0.5588, Rate 0.6: 0.4634, Rate 0.8: 0.4887, Rate 1.0: 0.4835\n","  Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.6086\n","    All rates: Rate 0.0: 0.5310, Rate 0.2: 0.6086, Rate 0.4: 0.5229, Rate 0.6: 0.5820, Rate 0.8: 0.5133, Rate 1.0: 0.4979\n","✅ Run 4 completed!\n","📈 Generating plot for Run 4...\n","\n","================================================================================\n","📊 PLOTTING RESULTS FOR RUN 4 (SEED 40) 📊\n","================================================================================\n","Domain 'age_over_30_body': Best rate = 0.0, Best F1 = 0.5692\n","Domain 'age_under_30_body': Best rate = 0.0, Best F1 = 0.5243\n","Domain 'age_over_30_head_neck': Best rate = 1.0, Best F1 = 0.4729\n","Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.5588\n","Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.6086\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹\n","\n","\n","================================================================================\n","🌱 RUN 5/5 - Setting random seed to 50\n","================================================================================\n","✅ Random seed 50 has been set for all libraries\n","🚀 Starting oversampling rate experiment...\n","\n","================================================================================\n","🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\n","================================================================================\n","\n","🔬 Tuning Domain: age_over_30_body\n","INFO: Found 3756 total samples in domain 'age_over_30_body'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  17%|█▋        | 1/6 [00:33<02:48, 33.73s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  33%|███▎      | 2/6 [01:08<02:17, 34.31s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  50%|█████     | 3/6 [01:46<01:47, 35.93s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  67%|██████▋   | 4/6 [02:25<01:14, 37.05s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body:  83%|████████▎ | 5/6 [03:03<00:37, 37.48s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_body: 100%|██████████| 6/6 [03:42<00:00, 37.04s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_under_30_body\n","INFO: Found 522 total samples in domain 'age_under_30_body'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  17%|█▋        | 1/6 [00:32<02:43, 32.80s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  33%|███▎      | 2/6 [01:09<02:21, 35.27s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  50%|█████     | 3/6 [01:48<01:49, 36.64s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  67%|██████▋   | 4/6 [02:26<01:14, 37.44s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body:  83%|████████▎ | 5/6 [03:05<00:37, 37.82s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_under_30_body: 100%|██████████| 6/6 [03:43<00:00, 37.30s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_head_neck\n","INFO: Found 349 total samples in domain 'age_over_30_head_neck'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  17%|█▋        | 1/6 [00:32<02:41, 32.24s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  33%|███▎      | 2/6 [01:04<02:08, 32.01s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  50%|█████     | 3/6 [01:36<01:36, 32.08s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  67%|██████▋   | 4/6 [02:07<01:03, 31.86s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck:  83%|████████▎ | 5/6 [02:39<00:31, 31.93s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_head_neck: 100%|██████████| 6/6 [03:12<00:00, 32.02s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_hands_feet\n","INFO: Found 296 total samples in domain 'age_over_30_hands_feet'.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  17%|█▋        | 1/6 [00:31<02:37, 31.43s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  33%|███▎      | 2/6 [01:05<02:12, 33.13s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  50%|█████     | 3/6 [01:41<01:43, 34.53s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  67%|██████▋   | 4/6 [02:18<01:10, 35.44s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet:  83%|████████▎ | 5/6 [02:55<00:35, 35.96s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_hands_feet: 100%|██████████| 6/6 [03:33<00:00, 35.62s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","🔬 Tuning Domain: age_over_30_limbs\n","INFO: Found 2202 total samples in domain 'age_over_30_limbs'.\n","WARNING: Domain is large. Subsampling to 2000 samples.\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:   0%|          | 0/6 [00:00<?, ?it/s, current_rate=0]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  17%|█▋        | 1/6 [00:36<03:04, 36.84s/it, current_rate=0.2]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  33%|███▎      | 2/6 [01:10<02:18, 34.72s/it, current_rate=0.4]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  50%|█████     | 3/6 [01:46<01:46, 35.34s/it, current_rate=0.6]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  67%|██████▋   | 4/6 [02:23<01:12, 36.06s/it, current_rate=0.8]/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs:  83%|████████▎ | 5/6 [03:01<00:36, 36.76s/it, current_rate=1]  /usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n","  warnings.warn(\n","/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=EfficientNet_V2_S_Weights.IMAGENET1K_V1`. You can also use `weights=EfficientNet_V2_S_Weights.DEFAULT` to get the most up-to-date weights.\n","  warnings.warn(msg)\n"]},{"name":"stdout","output_type":"stream","text":["Using EfficientNetV2-S backbone for Relation Network with feature dimension 1280\n"]},{"name":"stderr","output_type":"stream","text":["Testing Rates for age_over_30_limbs: 100%|██████████| 6/6 [03:38<00:00, 36.48s/it, current_rate=1]\n"]},{"name":"stdout","output_type":"stream","text":["\n","📊 Results for Run 5 (seed 50):\n","  Domain 'age_over_30_body': Best rate = 0.4, Best F1 = 0.5340\n","    All rates: Rate 0.0: 0.2624, Rate 0.2: 0.4684, Rate 0.4: 0.5340, Rate 0.6: 0.3887, Rate 0.8: 0.4752, Rate 1.0: 0.4662\n","  Domain 'age_under_30_body': Best rate = 1.0, Best F1 = 0.5518\n","    All rates: Rate 0.0: 0.4499, Rate 0.2: 0.4696, Rate 0.4: 0.3946, Rate 0.6: 0.5295, Rate 0.8: 0.4960, Rate 1.0: 0.5518\n","  Domain 'age_over_30_head_neck': Best rate = 0.2, Best F1 = 0.5393\n","    All rates: Rate 0.0: 0.3366, Rate 0.2: 0.5393, Rate 0.4: 0.4223, Rate 0.6: 0.5246, Rate 0.8: 0.4904, Rate 1.0: 0.4538\n","  Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.6863\n","    All rates: Rate 0.0: 0.4407, Rate 0.2: 0.3587, Rate 0.4: 0.6863, Rate 0.6: 0.4097, Rate 0.8: 0.4068, Rate 1.0: 0.3984\n","  Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.6304\n","    All rates: Rate 0.0: 0.6246, Rate 0.2: 0.6304, Rate 0.4: 0.6073, Rate 0.6: 0.5416, Rate 0.8: 0.4918, Rate 1.0: 0.3736\n","✅ Run 5 completed!\n","📈 Generating plot for Run 5...\n","\n","================================================================================\n","📊 PLOTTING RESULTS FOR RUN 5 (SEED 50) 📊\n","================================================================================\n","Domain 'age_over_30_body': Best rate = 0.4, Best F1 = 0.5340\n","Domain 'age_under_30_body': Best rate = 1.0, Best F1 = 0.5518\n","Domain 'age_over_30_head_neck': Best rate = 0.2, Best F1 = 0.5393\n","Domain 'age_over_30_hands_feet': Best rate = 0.4, Best F1 = 0.6863\n","Domain 'age_over_30_limbs': Best rate = 0.2, Best F1 = 0.6304\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹🔹\n","\n","\n","====================================================================================================\n","📊 CALCULATING AVERAGES ACROSS ALL RUNS\n","====================================================================================================\n","🔢 Average F1 scores for each oversampling rate across all seeds:\n","--------------------------------------------------------------------------------\n","\n","Domain: age_over_30_body\n","  Rate 0.0: Avg = 0.4264 ± 0.1073 (Range: 0.2624 - 0.5692) [Scores: ['0.4973', '0.3569', '0.4465', '0.5692', '0.2624']]\n","  Rate 0.2: Avg = 0.4302 ± 0.0622 (Range: 0.3277 - 0.5096) [Scores: ['0.4007', '0.3277', '0.4443', '0.5096', '0.4684']]\n","  Rate 0.4: Avg = 0.4761 ± 0.0697 (Range: 0.3616 - 0.5504) [Scores: ['0.3616', '0.5001', '0.4346', '0.5504', '0.5340']]\n","  Rate 0.6: Avg = 0.5074 ± 0.0831 (Range: 0.3887 - 0.6025) [Scores: ['0.6025', '0.4789', '0.6015', '0.4656', '0.3887']]\n","  Rate 0.8: Avg = 0.5133 ± 0.0205 (Range: 0.4752 - 0.5344) [Scores: ['0.5344', '0.5194', '0.5116', '0.5259', '0.4752']]\n","  Rate 1.0: Avg = 0.5039 ± 0.0576 (Range: 0.4517 - 0.6053) [Scores: ['0.6053', '0.4517', '0.5303', '0.4658', '0.4662']]\n","\n","Domain: age_over_30_hands_feet\n","  Rate 0.0: Avg = 0.4708 ± 0.0298 (Range: 0.4407 - 0.5118) [Scores: ['0.4539', '0.4460', '0.5015', '0.5118', '0.4407']]\n","  Rate 0.2: Avg = 0.4701 ± 0.0611 (Range: 0.3587 - 0.5427) [Scores: ['0.4685', '0.4804', '0.5000', '0.5427', '0.3587']]\n","  Rate 0.4: Avg = 0.5438 ± 0.0826 (Range: 0.4344 - 0.6863) [Scores: ['0.4344', '0.5359', '0.5038', '0.5588', '0.6863']]\n","  Rate 0.6: Avg = 0.4328 ± 0.0811 (Range: 0.2960 - 0.5439) [Scores: ['0.2960', '0.5439', '0.4511', '0.4634', '0.4097']]\n","  Rate 0.8: Avg = 0.4865 ± 0.0498 (Range: 0.4068 - 0.5593) [Scores: ['0.5080', '0.5593', '0.4695', '0.4887', '0.4068']]\n","  Rate 1.0: Avg = 0.4750 ± 0.0552 (Range: 0.3984 - 0.5504) [Scores: ['0.5139', '0.5504', '0.4290', '0.4835', '0.3984']]\n","\n","Domain: age_over_30_head_neck\n","  Rate 0.0: Avg = 0.4321 ± 0.0837 (Range: 0.3366 - 0.5629) [Scores: ['0.4730', '0.5629', '0.3480', '0.4400', '0.3366']]\n","  Rate 0.2: Avg = 0.5196 ± 0.0796 (Range: 0.3853 - 0.6252) [Scores: ['0.6252', '0.4917', '0.5563', '0.3853', '0.5393']]\n","  Rate 0.4: Avg = 0.4356 ± 0.0241 (Range: 0.4095 - 0.4797) [Scores: ['0.4404', '0.4797', '0.4095', '0.4264', '0.4223']]\n","  Rate 0.6: Avg = 0.4956 ± 0.0552 (Range: 0.4205 - 0.5843) [Scores: ['0.5843', '0.4762', '0.4726', '0.4205', '0.5246']]\n","  Rate 0.8: Avg = 0.4870 ± 0.0591 (Range: 0.3912 - 0.5778) [Scores: ['0.4862', '0.4896', '0.5778', '0.3912', '0.4904']]\n","  Rate 1.0: Avg = 0.4454 ± 0.0451 (Range: 0.3568 - 0.4784) [Scores: ['0.4784', '0.4649', '0.3568', '0.4729', '0.4538']]\n","\n","Domain: age_over_30_limbs\n","  Rate 0.0: Avg = 0.5318 ± 0.0860 (Range: 0.4046 - 0.6255) [Scores: ['0.6255', '0.4046', '0.4733', '0.5310', '0.6246']]\n","  Rate 0.2: Avg = 0.5590 ± 0.0665 (Range: 0.4398 - 0.6304) [Scores: ['0.5715', '0.4398', '0.5448', '0.6086', '0.6304']]\n","  Rate 0.4: Avg = 0.5082 ± 0.0894 (Range: 0.3542 - 0.6073) [Scores: ['0.5803', '0.4760', '0.3542', '0.5229', '0.6073']]\n","  Rate 0.6: Avg = 0.4680 ± 0.1261 (Range: 0.2278 - 0.5820) [Scores: ['0.2278', '0.4618', '0.5267', '0.5820', '0.5416']]\n","  Rate 0.8: Avg = 0.5102 ± 0.0324 (Range: 0.4753 - 0.5700) [Scores: ['0.5700', '0.4753', '0.5008', '0.5133', '0.4918']]\n","  Rate 1.0: Avg = 0.4415 ± 0.0885 (Range: 0.3463 - 0.5861) [Scores: ['0.5861', '0.4039', '0.3463', '0.4979', '0.3736']]\n","\n","Domain: age_under_30_body\n","  Rate 0.0: Avg = 0.5132 ± 0.0695 (Range: 0.4243 - 0.6168) [Scores: ['0.4243', '0.5505', '0.6168', '0.5243', '0.4499']]\n","  Rate 0.2: Avg = 0.4876 ± 0.0316 (Range: 0.4631 - 0.5474) [Scores: ['0.4631', '0.5474', '0.4656', '0.4924', '0.4696']]\n","  Rate 0.4: Avg = 0.4214 ± 0.0431 (Range: 0.3519 - 0.4711) [Scores: ['0.4538', '0.3519', '0.4355', '0.4711', '0.3946']]\n","  Rate 0.6: Avg = 0.5050 ± 0.0422 (Range: 0.4534 - 0.5595) [Scores: ['0.5254', '0.5595', '0.4534', '0.4573', '0.5295']]\n","  Rate 0.8: Avg = 0.5187 ± 0.0330 (Range: 0.4678 - 0.5617) [Scores: ['0.5617', '0.5368', '0.5315', '0.4678', '0.4960']]\n","  Rate 1.0: Avg = 0.5137 ± 0.0251 (Range: 0.4872 - 0.5518) [Scores: ['0.4956', '0.4872', '0.5349', '0.4988', '0.5518']]\n","\n","📈 Generating plot for averaged results across all 5 seeds...\n","\n","================================================================================\n","📊 PLOTTING COMBINED EXPERIMENT RESULTS - AVERAGED ACROSS 5 SEEDS 📊\n","================================================================================\n"]},{"data":{"image/png":"\n","text/plain":["<Figure size 1600x900 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"name":"stdout","output_type":"stream","text":["\n","====================================================================================================\n","🏁 ALL RUNS COMPLETED - SUMMARY\n","====================================================================================================\n","Total runs completed: 5\n","Results summary across all runs:\n","\n","Run 1 (seed 10):\n","  age_over_30_body: Rate=1.0, F1=0.6053\n","  age_under_30_body: Rate=0.8, F1=0.5617\n","  age_over_30_head_neck: Rate=0.2, F1=0.6252\n","  age_over_30_hands_feet: Rate=1.0, F1=0.5139\n","  age_over_30_limbs: Rate=0.0, F1=0.6255\n","\n","Run 2 (seed 20):\n","  age_over_30_body: Rate=0.8, F1=0.5194\n","  age_under_30_body: Rate=0.6, F1=0.5595\n","  age_over_30_head_neck: Rate=0.0, F1=0.5629\n","  age_over_30_hands_feet: Rate=0.8, F1=0.5593\n","  age_over_30_limbs: Rate=0.4, F1=0.4760\n","\n","Run 3 (seed 30):\n","  age_over_30_body: Rate=0.6, F1=0.6015\n","  age_under_30_body: Rate=0.0, F1=0.6168\n","  age_over_30_head_neck: Rate=0.8, F1=0.5778\n","  age_over_30_hands_feet: Rate=0.4, F1=0.5038\n","  age_over_30_limbs: Rate=0.2, F1=0.5448\n","\n","Run 4 (seed 40):\n","  age_over_30_body: Rate=0.0, F1=0.5692\n","  age_under_30_body: Rate=0.0, F1=0.5243\n","  age_over_30_head_neck: Rate=1.0, F1=0.4729\n","  age_over_30_hands_feet: Rate=0.4, F1=0.5588\n","  age_over_30_limbs: Rate=0.2, F1=0.6086\n","\n","Run 5 (seed 50):\n","  age_over_30_body: Rate=0.4, F1=0.5340\n","  age_under_30_body: Rate=1.0, F1=0.5518\n","  age_over_30_head_neck: Rate=0.2, F1=0.5393\n","  age_over_30_hands_feet: Rate=0.4, F1=0.6863\n","  age_over_30_limbs: Rate=0.2, F1=0.6304\n","\n","📈 AGGREGATED STATISTICS FOR BEST SCORES ACROSS ALL 5 RUNS:\n","--------------------------------------------------------------------------------\n","\n","Domain: age_over_30_body\n","  Best F1 scores: ['0.6053', '0.5194', '0.6015', '0.5692', '0.5340']\n","  Best rates: [1.0, 0.8, 0.6, 0.0, 0.4]\n","  Average F1: 0.5659 ± 0.0346\n","  Range: 0.5194 - 0.6053\n","\n","Domain: age_under_30_body\n","  Best F1 scores: ['0.5617', '0.5595', '0.6168', '0.5243', '0.5518']\n","  Best rates: [0.8, 0.6, 0.0, 0.0, 1.0]\n","  Average F1: 0.5628 ± 0.0301\n","  Range: 0.5243 - 0.6168\n","\n","Domain: age_over_30_head_neck\n","  Best F1 scores: ['0.6252', '0.5629', '0.5778', '0.4729', '0.5393']\n","  Best rates: [0.2, 0.0, 0.8, 1.0, 0.2]\n","  Average F1: 0.5556 ± 0.0500\n","  Range: 0.4729 - 0.6252\n","\n","Domain: age_over_30_hands_feet\n","  Best F1 scores: ['0.5139', '0.5593', '0.5038', '0.5588', '0.6863']\n","  Best rates: [1.0, 0.8, 0.4, 0.4, 0.4]\n","  Average F1: 0.5644 ± 0.0650\n","  Range: 0.5038 - 0.6863\n","\n","Domain: age_over_30_limbs\n","  Best F1 scores: ['0.6255', '0.4760', '0.5448', '0.6086', '0.6304']\n","  Best rates: [0.0, 0.4, 0.2, 0.2, 0.2]\n","  Average F1: 0.5771 ± 0.0590\n","  Range: 0.4760 - 0.6304\n","\n","🏆 BEST PERFORMING CONFIGURATIONS (averaged across all seeds):\n","--------------------------------------------------------------------------------\n","Domain 'age_over_30_body': Best rate = 0.8, Avg F1 = 0.5133\n","Domain 'age_over_30_hands_feet': Best rate = 0.4, Avg F1 = 0.5438\n","Domain 'age_over_30_head_neck': Best rate = 0.2, Avg F1 = 0.5196\n","Domain 'age_over_30_limbs': Best rate = 0.2, Avg F1 = 0.5590\n","Domain 'age_under_30_body': Best rate = 0.8, Avg F1 = 0.5187\n","\n","🥇 OVERALL BEST: Domain 'age_over_30_limbs' with rate 0.2 achieving average F1 = 0.5590\n","\n","🎉 Multi-seed experiment completed successfully!\n","All 5 runs with seeds [10, 20, 30, 40, 50] have been executed.\n","📊 Total plots generated: 5 individual run plots + 1 averaged plot = 6 plots\n"]}],"source":["import os\n","import pandas as pd\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","from torch.utils.data import Dataset, DataLoader\n","from torchvision import transforms, models\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.metrics import f1_score, roc_auc_score, precision_recall_curve, auc, confusion_matrix, precision_score, recall_score\n","from PIL import Image\n","from tqdm import tqdm\n","import matplotlib.pyplot as plt\n","import random\n","from collections import defaultdict\n","import copy\n","import traceback\n","\n","# For displaying plots in the output\n","%matplotlib inline\n","plt.rcParams['figure.figsize'] = (14, 8)\n","plt.style.use('ggplot')\n","\n","# Set random seeds for reproducibility\n","def set_seed(seed=20):\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    torch.manual_seed(seed)\n","    if torch.cuda.is_available():\n","        torch.cuda.manual_seed(seed)\n","        torch.cuda.manual_seed_all(seed)\n","    torch.backends.cudnn.deterministic = True\n","    torch.backends.cudnn.benchmark = False\n","\n","set_seed()\n","\n","# Define paths (using placeholder if original not found)\n","try:\n","    if not os.path.exists('/kaggle/input/skin-cancer-mnist-ham10000/'):\n","        raise FileNotFoundError\n","    BASE_PATH = '/kaggle/input/skin-cancer-mnist-ham10000/'\n","    DATA_PATH = BASE_PATH + 'HAM10000_metadata.csv'\n","    IMAGE_DIR_1 = BASE_PATH + 'HAM10000_images_part_1/'\n","    IMAGE_DIR_2 = BASE_PATH + 'HAM10000_images_part_2/'\n","except FileNotFoundError:\n","    print(\"Kaggle paths not found. Using placeholder paths for demonstration.\")\n","    os.makedirs(\"dummy_data/HAM10000_images_part_1\", exist_ok=True)\n","    os.makedirs(\"dummy_data/HAM10000_images_part_2\", exist_ok=True)\n","    dummy_df = pd.DataFrame({\n","        'lesion_id': [f'lesion_{i}' for i in range(2500)], 'image_id': [f'img_{i}' for i in range(2500)],\n","        'dx': np.random.choice(['nv', 'mel'], 2500, p=[0.9, 0.1]), 'age': np.random.randint(15, 80, 2500),\n","        'localization': np.random.choice(['back', 'face', 'foot', 'lower extremity', 'abdomen', 'chest', 'ear'], 2500)\n","    })\n","    dummy_df.to_csv(\"dummy_data/HAM10000_metadata.csv\", index=False)\n","    DATA_PATH = \"dummy_data/HAM10000_metadata.csv\"\n","    IMAGE_DIR_1 = \"dummy_data/HAM10000_images_part_1/\"\n","    IMAGE_DIR_2 = \"dummy_data/HAM10000_images_part_2/\"\n","\n","# --- Your FSL Code (Dataset, Model, Episodic Functions) ---\n","\n","class Config:\n","    img_size = 224\n","    batch_size = 32\n","    lr = 0.001\n","    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","    # FSL specific settings\n","    n_way = 2\n","    n_shot = 3\n","    n_query = 6\n","    domains = {\n","        'age_over_30_body': {'age_condition': lambda x: x > 30, 'loc_condition': lambda x: x in ['abdomen', 'back', 'chest', 'genital', 'trunk']},\n","        'age_under_30_body': {'age_condition': lambda x: x <= 30, 'loc_condition': lambda x: x in ['abdomen', 'back', 'chest', 'genital', 'trunk']},\n","        'age_over_30_head_neck': {'age_condition': lambda x: x > 30, 'loc_condition': lambda x: x in ['ear', 'face', 'neck', 'scalp']},\n","        'age_over_30_hands_feet': {'age_condition': lambda x: x > 30, 'loc_condition': lambda x: x in ['acral', 'foot', 'hand']},\n","        'age_over_30_limbs': {'age_condition': lambda x: x > 30, 'loc_condition': lambda x: x in ['lower extremity', 'upper extremity']}\n","    }\n","\n","config = Config()\n","print(f\"Using device: {config.device}\")\n","\n","def oversample_minority_class(domain_df, target_ratio):\n","    if target_ratio == 0.0: return domain_df\n","    minority_class_df = domain_df[domain_df['dx'] == 'mel'].copy()\n","    majority_class_df = domain_df[domain_df['dx'] == 'nv'].copy()\n","    if len(minority_class_df) == 0: return domain_df\n","    target_count = int(len(majority_class_df) * target_ratio)\n","    if len(minority_class_df) >= target_count: return domain_df\n","    n_synthetic = target_count - len(minority_class_df)\n","    synthetic_samples = minority_class_df.sample(n=n_synthetic, replace=True, random_state=42).copy()\n","    synthetic_samples['lesion_id'] = [f\"{lid}_syn_{i}\" for i, lid in enumerate(synthetic_samples['lesion_id'])]\n","    return pd.concat([domain_df, synthetic_samples], ignore_index=True)\n","\n","class HAM10000Dataset(Dataset):\n","    def __init__(self, df, img_dir_1, img_dir_2, transform=None):\n","        self.df = df\n","        self.img_dir_1 = img_dir_1\n","        self.img_dir_2 = img_dir_2\n","        self.transform = transform\n","        \n","        # Binary classification - melanoma vs nevus\n","        self.class_map = {\n","            'nv': 0,    # Melanocytic Nevi\n","            'mel': 1    # Melanoma\n","        }\n","        \n","        # Filter for binary classification (only melanoma and nevus)\n","        self.df = self.df[self.df['dx'].isin(['nv', 'mel'])].reset_index(drop=True)\n","        \n","        # Create label list\n","        self.labels = [self.class_map[dx] for dx in self.df['dx'].values]\n","        \n","        # Define milder augmentation for synthetic samples (less aggressive than before)\n","        self.synthetic_transform = transforms.Compose([\n","            transforms.RandomHorizontalFlip(p=0.5),  # Less aggressive flip probability\n","            transforms.RandomVerticalFlip(p=0.3),    # Less aggressive flip probability\n","            transforms.RandomRotation(30),           # Less rotation\n","            transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.05),  # Milder color jittering\n","            transforms.RandomAffine(degrees=0, translate=(0.05, 0.05), scale=(0.9, 1.1))    # Milder affine transform\n","        ])\n","        \n","    def __len__(self):\n","        return len(self.df)\n","    \n","    def __getitem__(self, idx):\n","        img_id = self.df.iloc[idx]['image_id']\n","        img_path_1 = os.path.join(self.img_dir_1, f\"{img_id}.jpg\")\n","        img_path_2 = os.path.join(self.img_dir_2, f\"{img_id}.jpg\")\n","        \n","        # Check if this is a synthetic sample (for augmentation-based oversampling)\n","        is_synthetic = '_syn_' in str(self.df.iloc[idx].get('lesion_id', ''))\n","        \n","        # Try to load from the first directory, then the second\n","        try:\n","            if os.path.exists(img_path_1):\n","                img = Image.open(img_path_1).convert('RGB')\n","            elif os.path.exists(img_path_2):\n","                img = Image.open(img_path_2).convert('RGB')\n","            else:\n","                raise FileNotFoundError(f\"Image {img_id} not found in either directory\")\n","        except Exception as e:\n","            print(f\"Warning: Error loading image {img_id}: {e}. Using placeholder.\")\n","            img = Image.new('RGB', (config.img_size, config.img_size), color='gray')\n","        \n","        # For synthetic samples, apply more moderate augmentation\n","        if is_synthetic:\n","            img = self.synthetic_transform(img)\n","        \n","        # Apply standard transformations\n","        if self.transform:\n","            img = self.transform(img)\n","        \n","        # Get label\n","        label = self.labels[idx]\n","        \n","        return img, label\n","\n","def get_transforms():\n","    train_transform = transforms.Compose([\n","        transforms.Resize((config.img_size, config.img_size)),\n","        transforms.RandomHorizontalFlip(p=0.5),\n","        transforms.RandomVerticalFlip(p=0.3),\n","        transforms.RandomRotation(10),  # Reduced rotation angle\n","        transforms.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.05),\n","        transforms.RandomAffine(degrees=0, translate=(0.05, 0.05), scale=(0.95, 1.05)),\n","        transforms.ToTensor(),\n","        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","    ])\n","    \n","    # Keep test transform the same\n","    test_transform = transforms.Compose([\n","        transforms.Resize((config.img_size, config.img_size)),\n","        transforms.ToTensor(),\n","        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])\n","    ])\n","    \n","    return train_transform, test_transform\n","\n","#====================================================\n","# START: IMPLEMENTED RELATION NETWORK CLASS\n","#====================================================\n","class RelationNet(nn.Module):\n","    def __init__(self):\n","        super(RelationNet, self).__init__()\n","        \n","        # Feature Extractor (Embedding Network)\n","        self.backbone = models.efficientnet_v2_s(pretrained=True)\n","        \n","        # Freeze early layers\n","        for name, param in self.backbone.named_parameters():\n","            if 'features.0.' in name or 'features.1.' in name:\n","                param.requires_grad = False\n","        \n","        # Get feature dimension\n","        self.feature_dim = self.backbone.classifier[1].in_features\n","        \n","        # Remove the classifier head\n","        self.backbone.classifier = nn.Identity()\n","        \n","        # Feature embedding layer\n","        self.embedding = nn.Sequential(\n","            nn.Linear(self.feature_dim, 512),\n","            nn.ReLU(),\n","            nn.Dropout(0.3),\n","            nn.Linear(512, 256),\n","            nn.Dropout(0.2)\n","        )\n","        \n","        # Relation Module - takes concatenated features and outputs relation score\n","        self.relation_module = nn.Sequential(\n","            nn.Linear(256 * 2, 512),  # Input: concatenated support and query features\n","            nn.ReLU(),\n","            nn.Dropout(0.3),\n","            nn.Linear(512, 256),\n","            nn.ReLU(),\n","            nn.Dropout(0.2),\n","            nn.Linear(256, 128),\n","            nn.ReLU(),\n","            nn.Linear(128, 1),  # Output: relation score\n","        )\n","        \n","        print(f\"Using EfficientNetV2-S backbone for Relation Network with feature dimension {self.feature_dim}\")\n","    \n","    def forward(self, x, return_embeddings=False):\n","        # Extract features using the backbone network\n","        features = self.backbone(x)\n","        # Project to the embedding space\n","        embeddings = self.embedding(features)\n","        \n","        if return_embeddings:\n","            return embeddings\n","        \n","        return embeddings\n","    \n","    def calculate_relations(self, support_features, support_labels, query_features, n_way):\n","        \"\"\"\n","        Calculate relation scores between query samples and support samples\n","        \"\"\"\n","        n_query = query_features.shape[0]\n","        \n","        # Initialize relation scores\n","        relation_scores = torch.zeros(n_query, n_way).to(query_features.device)\n","        \n","        for way in range(n_way):\n","            # Get support samples for this class\n","            support_mask = support_labels == way\n","            if support_mask.sum() == 0:\n","                # Handle case where a class has no support samples in the episode\n","                continue\n","            \n","            class_support_features = support_features[support_mask]  # [n_support_samples, feature_dim]\n","            \n","            # Calculate mean prototype for this class\n","            class_prototype = class_support_features.mean(0, keepdim=True)  # [1, feature_dim]\n","            \n","            # Expand prototype for all query samples\n","            expanded_prototype = class_prototype.expand(n_query, -1)  # [n_query, feature_dim]\n","            \n","            # Concatenate query features with class prototype\n","            concatenated_features = torch.cat([query_features, expanded_prototype], dim=1)  # [n_query, 2*embedding_dim]\n","            \n","            # Calculate relation scores using relation module\n","            class_relation_scores = self.relation_module(concatenated_features).squeeze(1)  # [n_query]\n","            \n","            relation_scores[:, way] = class_relation_scores\n","        \n","        return relation_scores\n","#====================================================\n","# END: IMPLEMENTED RELATION NETWORK CLASS\n","#====================================================\n","\n","\n","def create_episode(dataset, indices_by_class, n_way, n_shot, n_query):\n","    \"\"\"\n","    Create a more balanced episode for meta-learning\n","    \"\"\"\n","    # Get available classes\n","    available_classes = list(indices_by_class.keys())\n","    episode_classes = available_classes\n","    \n","    # Make sure we have enough samples for each class\n","    min_samples_per_class = min(len(indices_by_class[c]) for c in episode_classes)\n","    \n","    # Adjust shots and queries based on available samples\n","    actual_n_shot = min(n_shot, min_samples_per_class // 2 if min_samples_per_class > 1 else 0)\n","    actual_n_query = min(n_query, min_samples_per_class - actual_n_shot)\n","    \n","    # Check if we can proceed\n","    if actual_n_shot == 0 or actual_n_query == 0:\n","        return None, None, None, None\n","\n","    support_samples = []\n","    query_samples = []\n","    \n","    for class_idx in episode_classes:\n","        # Get all indices for this class\n","        class_indices = indices_by_class[class_idx]\n","        \n","        # Shuffle the indices\n","        random.shuffle(class_indices)\n","        \n","        # Split into support and query\n","        support_indices = class_indices[:actual_n_shot]\n","        query_indices = class_indices[actual_n_shot:actual_n_shot + actual_n_query]\n","        \n","        # Get support and query samples\n","        for idx in support_indices:\n","            img, label = dataset[idx]\n","            support_samples.append((img, class_idx))\n","        \n","        for idx in query_indices:\n","            img, label = dataset[idx]\n","            query_samples.append((img, class_idx))\n","    \n","    # Create tensors for support and query sets\n","    support_images = torch.stack([x[0] for x in support_samples])\n","    support_labels = torch.tensor([x[1] for x in support_samples])\n","    query_images = torch.stack([x[0] for x in query_samples])\n","    query_labels = torch.tensor([x[1] for x in query_samples])\n","    \n","    return support_images, support_labels, query_images, query_labels\n","\n","def preprocess_age(age):\n","    return 50 if pd.isna(age) or age <= 0 else age\n","\n","#############################################################################\n","### UPDATED FEATURE: FSL-BASED OVERSAMPLING RATE EXPERIMENT (using RelationNet) ###\n","#############################################################################\n","\n","def run_fsl_tuning_iteration(train_dataset, val_dataset, tuning_config):\n","    \"\"\" Trains a RelationNet model episodically and returns the validation F1-score. \"\"\"\n","    # Create class indices for episodic training\n","    train_indices_by_class = defaultdict(list)\n","    for i in range(len(train_dataset)):\n","        train_indices_by_class[train_dataset.labels[i]].append(i)\n","    \n","    val_indices_by_class = defaultdict(list)\n","    for i in range(len(val_dataset)):\n","        val_indices_by_class[val_dataset.labels[i]].append(i)\n","\n","    # Check if we can create episodes\n","    for d in [train_indices_by_class, val_indices_by_class]:\n","        for c in range(tuning_config.n_way):\n","            if len(d.get(c, [])) < tuning_config.n_shot + tuning_config.n_query:\n","                # Not enough samples in a class to create an episode\n","                return 0.0\n","\n","    #================================================\n","    # MODEL CHANGE: Using RelationNet\n","    #================================================\n","    model = RelationNet().to(tuning_config.device)\n","    optimizer = torch.optim.Adam(model.parameters(), lr=tuning_config.lr)\n","    \n","    # --- Episodic Training Loop ---\n","    for _ in range(tuning_config.train_episodes):\n","        episode_data = create_episode(\n","            train_dataset, train_indices_by_class, tuning_config.n_way, tuning_config.n_shot, tuning_config.n_query\n","        )\n","        if episode_data[0] is None: continue # Skip if episode creation failed\n","        support_images, support_labels, query_images, query_labels = episode_data\n","\n","        support_images, support_labels = support_images.to(config.device), support_labels.to(config.device)\n","        query_images, query_labels = query_images.to(config.device), query_labels.to(config.device)\n","        \n","        optimizer.zero_grad()\n","        \n","        #================================================\n","        # LOGIC CHANGE: RelationNet Training Step\n","        #================================================\n","        support_features = model(support_images)\n","        query_features = model(query_images)\n","        relation_scores = model.calculate_relations(support_features, support_labels, query_features, tuning_config.n_way)\n","        \n","        # Use CrossEntropyLoss for relation scores, which are effectively logits\n","        loss = F.cross_entropy(relation_scores, query_labels)\n","        #================================================\n","        \n","        loss.backward()\n","        optimizer.step()\n","\n","    # --- Episodic Evaluation ---\n","    model.eval()\n","    all_preds, all_labels = [], []\n","    with torch.no_grad():\n","        for _ in range(tuning_config.val_episodes):\n","            episode_data = create_episode(\n","                val_dataset, val_indices_by_class, tuning_config.n_way, tuning_config.n_shot, tuning_config.n_query\n","            )\n","            if episode_data[0] is None: continue # Skip if episode creation failed\n","            support_images, support_labels, query_images, query_labels = episode_data\n","\n","            support_images, support_labels = support_images.to(config.device), support_labels.to(config.device)\n","            query_images, query_labels = query_images.to(config.device), query_labels.to(config.device)\n","\n","            #================================================\n","            # LOGIC CHANGE: RelationNet Evaluation Step\n","            #================================================\n","            support_features = model(support_images)\n","            query_features = model(query_images)\n","            relation_scores = model.calculate_relations(support_features, support_labels, query_features, tuning_config.n_way)\n","            \n","            # Use argmax for relation scores (higher score = better match)\n","            preds = torch.argmax(relation_scores, dim=1)\n","            #================================================\n","            \n","            all_preds.extend(preds.cpu().numpy())\n","            all_labels.extend(query_labels.cpu().numpy())\n","    \n","    if len(np.unique(all_labels)) < 2: return 0.0\n","    return f1_score(all_labels, all_preds, average='binary', pos_label=1, zero_division=0)\n","\n","\n","def run_oversampling_rate_experiment_fsl():\n","    \"\"\" Orchestrates the FSL-based experiment using StratifiedKFold. \"\"\"\n","    print(\"\\n\" + \"=\"*80 + \"\\n🚀 STARTING FSL (RELATIONNET) OVERSAMPLING RATE EXPERIMENT 🚀\\n\" + \"=\"*80)\n","\n","    # --- Config ---\n","    domains_to_tune = list(config.domains.keys())\n","    rates_to_test = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\n","    n_splits = 3\n","    \n","    tuning_config = copy.deepcopy(config)\n","    tuning_config.train_episodes = 10 # Lightweight training\n","    tuning_config.val_episodes = 20   # Lightweight validation\n","    \n","    # --- Data Prep ---\n","    df = pd.read_csv(DATA_PATH)\n","    df['age'] = df['age'].apply(preprocess_age)\n","    df = df[df['dx'].isin(['nv', 'mel'])].reset_index(drop=True)\n","    train_transform, _ = get_transforms() # We only need one transform type for the dataset\n","\n","    # --- Experiment ---\n","    all_results = defaultdict(dict)\n","\n","    for domain_to_tune in domains_to_tune:\n","        print(f\"\\n🔬 Tuning Domain: {domain_to_tune}\")\n","        \n","        domain_conditions = config.domains[domain_to_tune]\n","        domain_df_full = df[df['age'].apply(domain_conditions['age_condition']) & df['localization'].apply(domain_conditions['loc_condition'])]\n","        print(f\"INFO: Found {len(domain_df_full)} total samples in domain '{domain_to_tune}'.\")\n","\n","        MAX_SAMPLES_FOR_TUNING = 2000\n","        if len(domain_df_full) > MAX_SAMPLES_FOR_TUNING:\n","            print(f\"WARNING: Domain is large. Subsampling to {MAX_SAMPLES_FOR_TUNING} samples.\")\n","            domain_df = domain_df_full.sample(n=MAX_SAMPLES_FOR_TUNING, random_state=42)\n","        else:\n","            domain_df = domain_df_full\n","        \n","        # Check for sufficient minority samples for both splitting and episode creation\n","        min_samples_needed = n_splits * (tuning_config.n_shot + tuning_config.n_query)\n","        if len(domain_df) < 40 or domain_df['dx'].value_counts().get('mel', 0) < min_samples_needed:\n","            print(f\"WARNING: Skipping domain '{domain_to_tune}'. Not enough minority samples ({domain_df['dx'].value_counts().get('mel', 0)}) for {n_splits}-fold CV and episode creation.\")\n","            continue\n","            \n","        progress_bar = tqdm(rates_to_test, desc=f\"Testing Rates for {domain_to_tune}\")\n","        for rate in progress_bar:\n","            progress_bar.set_postfix(current_rate=rate)\n","            \n","            skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=42)\n","            fold_f1_scores = []\n","            \n","            for fold, (train_index, val_index) in enumerate(skf.split(domain_df, domain_df['dx'])):\n","                train_df_fold = domain_df.iloc[train_index]\n","                val_df_fold = domain_df.iloc[val_index]\n","                \n","                train_df_oversampled = oversample_minority_class(train_df_fold, target_ratio=rate)\n","                train_dataset = HAM10000Dataset(train_df_oversampled, IMAGE_DIR_1, IMAGE_DIR_2, transform=train_transform)\n","                val_dataset = HAM10000Dataset(val_df_fold, IMAGE_DIR_1, IMAGE_DIR_2, transform=train_transform)\n","\n","                f1 = run_fsl_tuning_iteration(train_dataset, val_dataset, tuning_config)\n","                fold_f1_scores.append(f1)\n","            \n","            average_f1 = np.mean(fold_f1_scores) if fold_f1_scores else 0.0\n","            all_results[domain_to_tune][rate] = average_f1\n","    \n","    return all_results\n","\n","def plot_tuning_results_for_run(results, run_idx, seed):\n","    \"\"\" Generates a plot for a specific run, even if results are empty. \"\"\"\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"📊 PLOTTING RESULTS FOR RUN {run_idx} (SEED {seed}) 📊\")\n","    print(\"=\"*80)\n","    \n","    plt.figure(figsize=(16, 9))\n","    \n","    has_data = False\n","    \n","    if results:\n","        for domain_name, rate_scores in results.items():\n","            if not rate_scores: \n","                print(f\"No data for domain '{domain_name}' in this run\")\n","                continue\n","            \n","            rates = sorted(rate_scores.keys())\n","            scores = [rate_scores[r] for r in rates]\n","            \n","            if scores:\n","                has_data = True\n","                line, = plt.plot(rates, scores, marker='o', linestyle='-', linewidth=2, markersize=8, label=domain_name)\n","                \n","                if max(scores) > 0:\n","                    best_score = max(scores)\n","                    best_rate = rates[np.argmax(scores)]\n","                    plt.scatter(best_rate, best_score, color=line.get_color(), edgecolor='black', s=200, zorder=5)\n","                    plt.text(best_rate + 0.02, best_score + 0.02, f'{best_score:.3f}', \n","                             color=line.get_color(), fontsize=11, fontweight='bold')\n","                    print(f\"Domain '{domain_name}': Best rate = {best_rate}, Best F1 = {best_score:.4f}\")\n","    \n","    plt.title(f\"Run {run_idx} (Seed {seed}): FSL (RelationNet) Performance vs Oversampling Rate\", fontsize=18, fontweight='bold')\n","    plt.xlabel(\"Oversampling Rate (Minority vs. Majority)\", fontsize=14)\n","    plt.ylabel(\"Average Validation F1-Score (3-Fold CV)\", fontsize=14)\n","    plt.xlim(-0.05, 1.05)\n","    plt.ylim(-0.05, 1.05)\n","    plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.7)\n","    \n","    if not has_data:\n","        plt.text(0.5, 0.5, f'No Valid Results for Run {run_idx}\\n(Seed {seed})', \n","                 ha='center', va='center', fontsize=16, \n","                 bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"lightgray\"))\n","        print(f\"No valid results to plot for Run {run_idx}\")\n","    else:\n","        plt.legend(title=\"Domain\", bbox_to_anchor=(1.04, 1), loc=\"upper left\")\n","    \n","    plt.tight_layout(rect=[0, 0, 0.85, 1])\n","    plt.show()\n","    \n","    return has_data\n","\n","def plot_tuning_results_combined(results, title_suffix=\"\"):\n","    \"\"\" Generates a single combined line graph of the tuning experiment results. \"\"\"\n","    suffix_text = f\" - {title_suffix}\" if title_suffix else \"\"\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"📊 PLOTTING COMBINED EXPERIMENT RESULTS{suffix_text.upper()} 📊\")\n","    print(\"=\"*80)\n","    \n","    plt.figure(figsize=(16, 9))\n","    \n","    has_data = False\n","    if results:\n","        for domain_name, rate_scores in results.items():\n","            if not rate_scores: continue\n","            rates = sorted(rate_scores.keys())\n","            scores = [rate_scores[r] for r in rates]\n","            if scores:\n","                has_data = True\n","                line, = plt.plot(rates, scores, marker='o', linestyle='-', linewidth=2, markersize=8, label=domain_name)\n","                if max(scores) > 0:\n","                    best_score = max(scores)\n","                    best_rate = rates[np.argmax(scores)]\n","                    plt.scatter(best_rate, best_score, color=line.get_color(), edgecolor='black', s=200, zorder=5)\n","                    plt.text(best_rate + 0.01, best_score, f'{best_score:.3f}', color=line.get_color(), fontsize=12, fontweight='bold')\n","    \n","    plt.title(f\"Impact of Oversampling Rate on FSL (RelationNet) Performance{suffix_text}\", fontsize=18)\n","    plt.xlabel(\"Oversampling Rate (Minority vs. Majority)\", fontsize=14)\n","    plt.ylabel(\"Average Validation F1-Score (from 3-Fold CV)\", fontsize=14)\n","    plt.xlim(-0.05, 1.05)\n","    plt.ylim(-0.05, 1.05)\n","    plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n","    \n","    if not has_data:\n","        plt.text(0.5, 0.5, f'No Valid Results{suffix_text}', ha='center', va='center', fontsize=16, \n","                 bbox=dict(boxstyle=\"round,pad=0.3\", facecolor=\"lightgray\"))\n","    else:\n","        plt.legend(title=\"Domain\", bbox_to_anchor=(1.04, 1), loc=\"upper left\")\n","    \n","    plt.tight_layout(rect=[0, 0, 0.85, 1])\n","    plt.show()\n","\n","\n","if __name__ == \"__main__\":\n","    seeds_to_test = [10, 20, 30, 40, 50]\n","    all_runs_results = {}\n","    \n","    print(\"=\"*100)\n","    print(\"🎯 STARTING MULTI-SEED OVERSAMPLING RATE EXPERIMENT (RELATIONNET)\")\n","    print(f\"Will run {len(seeds_to_test)} experiments with seeds: {seeds_to_test}\")\n","    print(\"=\"*100)\n","    \n","    for run_idx, seed in enumerate(seeds_to_test, 1):\n","        print(f\"\\n{'='*80}\")\n","        print(f\"🌱 RUN {run_idx}/{len(seeds_to_test)} - Setting random seed to {seed}\")\n","        print(f\"{'='*80}\")\n","        \n","        set_seed(seed)\n","        \n","        print(f\"✅ Random seed {seed} has been set for all libraries\")\n","        print(f\"🚀 Starting oversampling rate experiment...\")\n","        \n","        tuning_results = run_oversampling_rate_experiment_fsl()\n","        \n","        all_runs_results[f\"run_{run_idx}_seed_{seed}\"] = tuning_results\n","        \n","        print(f\"\\n📊 Results for Run {run_idx} (seed {seed}):\")\n","        if tuning_results:\n","            for domain, rates_scores in tuning_results.items():\n","                if rates_scores:\n","                    best_rate = max(rates_scores.keys(), key=lambda k: rates_scores[k])\n","                    best_score = rates_scores[best_rate]\n","                    print(f\"  Domain '{domain}': Best rate = {best_rate}, Best F1 = {best_score:.4f}\")\n","                    \n","                    rate_details = \", \".join([f\"Rate {r}: {s:.4f}\" for r, s in sorted(rates_scores.items())])\n","                    print(f\"    All rates: {rate_details}\")\n","                else:\n","                    print(f\"  Domain '{domain}': No valid results\")\n","        else:\n","            print(\"  No results obtained for this run\")\n","        \n","        print(f\"✅ Run {run_idx} completed!\")\n","        \n","        print(f\"📈 Generating plot for Run {run_idx}...\")\n","        plot_tuning_results_for_run(tuning_results, run_idx, seed)\n","        \n","        print(\"\\n\" + \"🔹\" * 100 + \"\\n\")\n","    \n","    print(\"\\n\" + \"=\"*100)\n","    print(\"📊 CALCULATING AVERAGES ACROSS ALL RUNS\")\n","    print(\"=\"*100)\n","    \n","    domain_rate_scores = defaultdict(lambda: defaultdict(list))\n","    \n","    for run_name, results in all_runs_results.items():\n","        for domain, rates_scores in results.items():\n","            for rate, score in rates_scores.items():\n","                domain_rate_scores[domain][rate].append(score)\n","    \n","    averaged_results = {}\n","    \n","    print(\"🔢 Average F1 scores for each oversampling rate across all seeds:\")\n","    print(\"-\" * 80)\n","    \n","    for domain in sorted(domain_rate_scores.keys()):\n","        print(f\"\\nDomain: {domain}\")\n","        averaged_results[domain] = {}\n","        \n","        for rate in sorted(domain_rate_scores[domain].keys()):\n","            scores = domain_rate_scores[domain][rate]\n","            avg_score = np.mean(scores)\n","            std_score = np.std(scores)\n","            min_score = np.min(scores)\n","            max_score = np.max(scores)\n","            \n","            averaged_results[domain][rate] = avg_score\n","            \n","            print(f\"  Rate {rate}: Avg = {avg_score:.4f} ± {std_score:.4f} \"\n","                  f\"(Range: {min_score:.4f} - {max_score:.4f}) \"\n","                  f\"[Scores: {[f'{s:.4f}' for s in scores]}]\")\n","    \n","    print(f\"\\n📈 Generating plot for averaged results across all {len(seeds_to_test)} seeds...\")\n","    plot_tuning_results_combined(averaged_results, f\"Averaged Across {len(seeds_to_test)} Seeds\")\n","    \n","    print(\"\\n\" + \"=\"*100)\n","    print(\"🏁 ALL RUNS COMPLETED - SUMMARY\")\n","    print(\"=\"*100)\n","    \n","    print(f\"Total runs completed: {len(all_runs_results)}\")\n","    print(\"Results summary across all runs:\")\n","    \n","    domain_best_scores = defaultdict(list)\n","    domain_best_rates = defaultdict(list)\n","    \n","    for run_name, results in all_runs_results.items():\n","        run_number = run_name.split('_')[1]\n","        seed = run_name.split('_')[3]\n","        print(f\"\\nRun {run_number} (seed {seed}):\")\n","        \n","        for domain, rates_scores in results.items():\n","            if rates_scores:\n","                best_rate = max(rates_scores.keys(), key=lambda k: rates_scores[k])\n","                best_score = rates_scores[best_rate]\n","                domain_best_scores[domain].append(best_score)\n","                domain_best_rates[domain].append(best_rate)\n","                print(f\"  {domain}: Rate={best_rate}, F1={best_score:.4f}\")\n","    \n","    print(f\"\\n📈 AGGREGATED STATISTICS FOR BEST SCORES ACROSS ALL {len(seeds_to_test)} RUNS:\")\n","    print(\"-\" * 80)\n","    \n","    for domain in domain_best_scores.keys():\n","        scores = domain_best_scores[domain]\n","        rates = domain_best_rates[domain]\n","        \n","        if scores:\n","            avg_score = np.mean(scores)\n","            std_score = np.std(scores)\n","            min_score = np.min(scores)\n","            max_score = np.max(scores)\n","            \n","            print(f\"\\nDomain: {domain}\")\n","            print(f\"  Best F1 scores: {[f'{s:.4f}' for s in scores]}\")\n","            print(f\"  Best rates: {rates}\")\n","            print(f\"  Average F1: {avg_score:.4f} ± {std_score:.4f}\")\n","            print(f\"  Range: {min_score:.4f} - {max_score:.4f}\")\n","    \n","    print(f\"\\n🏆 BEST PERFORMING CONFIGURATIONS (averaged across all seeds):\")\n","    print(\"-\" * 80)\n","    \n","    best_overall_score = 0\n","    best_overall_domain = \"\"\n","    best_overall_rate = 0\n","    \n","    for domain, rates_scores in averaged_results.items():\n","        if rates_scores:\n","            domain_best_rate = max(rates_scores.keys(), key=lambda k: rates_scores[k])\n","            domain_best_score = rates_scores[domain_best_rate]\n","            \n","            print(f\"Domain '{domain}': Best rate = {domain_best_rate}, Avg F1 = {domain_best_score:.4f}\")\n","            \n","            if domain_best_score > best_overall_score:\n","                best_overall_score = domain_best_score\n","                best_overall_domain = domain\n","                best_overall_rate = domain_best_rate\n","    \n","    if best_overall_domain:\n","        print(f\"\\n🥇 OVERALL BEST: Domain '{best_overall_domain}' with rate {best_overall_rate} \"\n","              f\"achieving average F1 = {best_overall_score:.4f}\")\n","    \n","    print(f\"\\n🎉 Multi-seed experiment completed successfully!\")\n","    print(f\"All {len(seeds_to_test)} runs with seeds {seeds_to_test} have been executed.\")\n","    print(f\"📊 Total plots generated: {len(seeds_to_test)} individual run plots + 1 averaged plot = {len(seeds_to_test) + 1} plots\")"]}],"metadata":{"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":54339,"sourceId":104884,"sourceType":"datasetVersion"}],"dockerImageVersionId":31041,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.11"},"papermill":{"default_parameters":{},"duration":5444.368268,"end_time":"2025-06-16T17:27:33.066174","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-06-16T15:56:48.697906","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}